// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LogLevel {
  INFO
  DEBUG
  ERROR
}

enum InstanceState {
  NOT_EXIST
  NOT_REGISTERED
  SUBMIT_REGISTER
  OFFLINE
  PREPARING
  RUNNING
}

model User {
  id      Int      @id @default(autoincrement())
  user_id    String   @unique
  user_pw   String   
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expired_at DateTime
  macro_data MacroData?
  instance Instance?
  progress_log ProgressLog[]
  general_log GeneralLog[]
  is_expired Boolean @default(false)
}

model Instance {
  id      Int      @id @default(autoincrement())
  user User   @relation(fields: [user_pk], references: [id], onDelete: Cascade)
  user_pk Int @unique
  login_id String?
  login_pw String?
  resource_ip String
  adb_port_number Int?
  state InstanceState @default(NOT_EXIST)
}

model MacroData {
  id      Int      @id @default(autoincrement())
  user User   @relation(fields: [user_pk], references: [id], onDelete: Cascade)
  user_pk Int @unique
  subscribe Boolean @default(true)
  tax Boolean @default(true)
  exploration Boolean @default(true)
  recruit Boolean @default(true)
  trial Boolean @default(true)
  next_execute_time DateTime?
}

model ProgressLog {
  id      Int      @id @default(autoincrement())
  user User   @relation(fields: [user_pk], references: [id], onDelete: Cascade)
  user_pk Int
  message String
  grade LogLevel 
  created_at DateTime @default(now())
}

model GeneralLog {
  id      Int      @id @default(autoincrement())
  user User   @relation(fields: [user_pk], references: [id], onDelete: Cascade)
  user_pk Int
  name String
  created_at DateTime @default(now())
}

model NotRegisteredYet {
  id      Int      @id @default(autoincrement())
  user_id String
  kinds String
  login_id String
  login_pw String
}